# Generated by Django 5.2.4 on 2025-10-04 05:53

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0004_nutrition'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CheckinForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Weekly Check-in', max_length=120)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Muscle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('group', models.CharField(choices=[('chest', 'Chest'), ('back', 'Back'), ('shoulders', 'Shoulders'), ('arms', 'Arms'), ('core', 'Core'), ('legs', 'Legs'), ('full_body', 'Full Body')], max_length=20)),
            ],
            options={
                'ordering': ['group', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('interval', models.CharField(choices=[('one_time', 'One time'), ('monthly', 'Monthly'), ('3_month', '3 - Month'), ('6_month', '6 - Month')], max_length=20)),
                ('price_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='PKR', max_length=10)),
                ('is_default', models.BooleanField(default=False)),
                ('sort_order', models.PositiveSmallIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.AddField(
            model_name='userprofile',
            name='calorie_rollover_enabled',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='daily_step_goal',
            field=models.PositiveIntegerField(default=10000),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='daily_water_goal_ml',
            field=models.PositiveIntegerField(default=2000),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='email_verified',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='goal_rate_lbs_per_week',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='onboarding_completed',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='phone_verified',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='sleep_goal_hours',
            field=models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='timezone',
            field=models.CharField(default='UTC', max_length=64),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='workouts_per_week',
            field=models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(14)]),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='dietary_preferences',
            field=models.CharField(blank=True, choices=[('meat', 'Meat'), ('meat_veg', 'Meat & Veg'), ('veg', 'Vegetarian'), ('vegan', 'Vegan'), ('keto', 'Keto'), ('paleo', 'Paleo'), ('other', 'Other')], max_length=20),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='phone',
            field=models.CharField(blank=True, max_length=20),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='source',
            field=models.CharField(blank=True, choices=[('social', 'Social Media'), ('friend', 'Friend or Family'), ('google', 'Google Search'), ('ads', 'Ads'), ('other', 'Other'), ('tiktok', 'TikTok'), ('youtube', 'YouTube'), ('facebook', 'Facebook'), ('instagram', 'Instagram'), ('tv', 'TV')], max_length=20),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='unit_system',
            field=models.CharField(choices=[('metric', 'Metric (kg/cm)'), ('imperial', 'Imperial (lbs/in)')], default='metric', max_length=10),
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('full_name', models.CharField(max_length=120)),
                ('phone', models.CharField(max_length=20)),
                ('line1', models.CharField(max_length=200)),
                ('line2', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('province', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('is_default', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CardioSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity', models.CharField(choices=[('run', 'Running'), ('walk', 'Walking'), ('cycle', 'Cycling'), ('other', 'Other')], default='run', max_length=16)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('distance_m', models.PositiveIntegerField(default=0)),
                ('calories', models.PositiveIntegerField(default=0)),
                ('avg_hr', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('max_hr', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cardio_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(blank=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChatAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='chat_attachments/')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='app.chatmessage')),
            ],
        ),
        migrations.CreateModel(
            name='ChatThread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('topic', models.CharField(blank=True, max_length=120)),
                ('is_support', models.BooleanField(default=False)),
                ('participants', models.ManyToManyField(related_name='chat_threads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='chatmessage',
            name='thread',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='app.chatthread'),
        ),
        migrations.CreateModel(
            name='Checkin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True)),
                ('sleep_hours', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('energy_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('meal_plan_use', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('workout_plan_use', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkins', to=settings.AUTH_USER_MODEL)),
                ('form', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.checkinform')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CheckinPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('front', 'Front'), ('side', 'Side'), ('back', 'Back')], max_length=10)),
                ('image', models.ImageField(upload_to='checkin_photos/')),
                ('checkin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='app.checkin')),
            ],
        ),
        migrations.CreateModel(
            name='CheckinQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(default=1)),
                ('text', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('rating', 'Rating (1-5)'), ('number', 'Number'), ('text', 'Text'), ('choice', 'Single Choice')], default='text', max_length=16)),
                ('choices', models.JSONField(blank=True, null=True)),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='app.checkinform')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='CheckinAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True)),
                ('checkin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='app.checkin')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.checkinquestion')),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('is_custom', models.BooleanField(default=False)),
                ('calories', models.FloatField()),
                ('protein', models.FloatField()),
                ('carbs', models.FloatField()),
                ('fat', models.FloatField()),
                ('fiber', models.FloatField(default=0)),
                ('allergens', models.CharField(blank=True, max_length=255)),
                ('image', models.ImageField(blank=True, null=True, upload_to='food_images/')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.foodbrand')),
            ],
        ),
        migrations.CreateModel(
            name='FoodBarcode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=64, unique=True)),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barcodes', to='app.food')),
            ],
        ),
        migrations.CreateModel(
            name='FoodPortion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='100 g', max_length=64)),
                ('unit', models.CharField(choices=[('g', 'Gram'), ('ml', 'Milliliter'), ('piece', 'Piece'), ('cup', 'Cup'), ('tbsp', 'Tablespoon'), ('tsp', 'Teaspoon'), ('oz', 'Ounce'), ('plate', 'Plate')], default='g', max_length=16)),
                ('quantity', models.FloatField(default=100.0)),
                ('grams', models.FloatField()),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portions', to='app.food')),
            ],
        ),
        migrations.CreateModel(
            name='HeartRateSample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.DateTimeField()),
                ('bpm', models.PositiveSmallIntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hr_samples', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='PKR', max_length=10)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default='unpaid', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LoginOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone')], max_length=10)),
                ('destination', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=8)),
                ('expires_at', models.DateTimeField()),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('attempt_count', models.PositiveSmallIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='otps', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MacroPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(choices=[('auto', 'Auto'), ('manual', 'Manual')], default='auto', max_length=10)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('bmr', models.PositiveIntegerField(blank=True, null=True)),
                ('tdee', models.PositiveIntegerField(blank=True, null=True)),
                ('calorie_target', models.PositiveIntegerField()),
                ('protein_g', models.PositiveIntegerField()),
                ('carbs_g', models.PositiveIntegerField()),
                ('fats_g', models.PositiveIntegerField()),
                ('active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='macro_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='MealSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meals_per_week', models.PositiveSmallIntegerField(default=10)),
                ('portion', models.CharField(choices=[('standard', 'Standard'), ('low_cal', 'Low Calorie'), ('high_protein', 'High Protein')], default='standard', max_length=20)),
                ('protein_preference', models.CharField(choices=[('meat_vegan', 'Meat & Vegan'), ('meat_only', 'Meat Only'), ('vegan_only', 'Vegan Only')], default='meat_vegan', max_length=20)),
                ('delivery_window', models.CharField(default='08:00-09:00', max_length=50)),
                ('start_date', models.DateField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('canceled', 'Canceled')], default='active', max_length=20)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='meal_subscriptions', to='app.address')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_subscriptions', to=settings.AUTH_USER_MODEL)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.plan')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Delivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scheduled_date', models.DateField()),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('out_for_delivery', 'Out for Delivery'), ('delivered', 'Delivered'), ('missed', 'Missed')], default='scheduled', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='app.mealsubscription')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=120, unique=True)),
                ('equipment', models.CharField(blank=True, max_length=64)),
                ('video_url', models.URLField(blank=True)),
                ('instructions', models.TextField(blank=True)),
                ('unilateral', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_exercises', to=settings.AUTH_USER_MODEL)),
                ('primary_muscle', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_exercises', to='app.muscle')),
                ('secondary_muscles', models.ManyToManyField(blank=True, related_name='secondary_exercises', to='app.muscle')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.CharField(choices=[('card', 'Card'), ('bank', 'Bank Transfer'), ('gpay', 'Google Pay')], max_length=20)),
                ('brand', models.CharField(blank=True, max_length=30)),
                ('last4', models.CharField(blank=True, max_length=4)),
                ('token', models.CharField(blank=True, max_length=255)),
                ('is_default', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='PKR', max_length=10)),
                ('provider_id', models.CharField(blank=True, max_length=255)),
                ('succeeded', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='app.invoice')),
                ('method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.paymentmethod')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='plan',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plans', to='app.product'),
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('is_public', models.BooleanField(default=False)),
                ('image', models.ImageField(blank=True, null=True, upload_to='recipe_images/')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FoodDiaryEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('time', models.TimeField(blank=True, null=True)),
                ('meal_time', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('snack', 'Snack')], default='lunch', max_length=20)),
                ('servings', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('notes', models.CharField(blank=True, max_length=255)),
                ('food', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.food')),
                ('meal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.meal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_diary_entries', to=settings.AUTH_USER_MODEL)),
                ('portion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.foodportion')),
                ('recipe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.recipe')),
            ],
            options={
                'ordering': ['-date', '-time'],
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grams', models.FloatField()),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.food')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='app.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='SetLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(default=1)),
                ('set_number', models.PositiveSmallIntegerField(default=1)),
                ('reps', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('time_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('distance_m', models.PositiveIntegerField(blank=True, null=True)),
                ('rpe', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('completed', models.BooleanField(default=True)),
                ('notes', models.CharField(blank=True, max_length=255)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.exercise')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sets', to='app.userworkoutlog')),
            ],
            options={
                'ordering': ['session', 'order', 'set_number'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('trialing', 'Trialing'), ('past_due', 'Past Due'), ('paused', 'Paused'), ('canceled', 'Canceled'), ('expired', 'Expired')], default='active', max_length=20)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('current_period_end', models.DateTimeField(blank=True, null=True)),
                ('auto_renew', models.BooleanField(default=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.plan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='invoice',
            name='subscription',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoices', to='app.subscription'),
        ),
        migrations.CreateModel(
            name='UserFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('file', models.FileField(upload_to='user_files/')),
                ('tag', models.CharField(blank=True, max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WaterLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('amount_ml', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='water_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WeeklyMealSelection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_start', models.DateField()),
                ('quantity', models.PositiveSmallIntegerField(default=1)),
                ('meal', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.meal')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weekly_selections', to='app.mealsubscription')),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=1)),
                ('sets', models.PositiveSmallIntegerField(default=3)),
                ('reps', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('reps_min', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('reps_max', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('time_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('distance_m', models.PositiveIntegerField(blank=True, null=True)),
                ('rest_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('rpe_min', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('rpe_max', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('tempo', models.CharField(blank=True, help_text='e.g., 3-1-1-0', max_length=16)),
                ('notes', models.TextField(blank=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.exercise')),
                ('workout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='app.workout')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='DailyActivitySummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('steps', models.PositiveIntegerField(default=0)),
                ('calories_burned', models.PositiveIntegerField(default=0)),
                ('distance_m', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_summaries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.CreateModel(
            name='DailyMacroTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('calorie_target', models.PositiveIntegerField()),
                ('protein_g', models.PositiveIntegerField()),
                ('carbs_g', models.PositiveIntegerField()),
                ('fats_g', models.PositiveIntegerField()),
                ('rollover_from_yesterday', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_macro_targets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.AddIndex(
            model_name='food',
            index=models.Index(fields=['name'], name='app_food_name_80b511_idx'),
        ),
        migrations.AddIndex(
            model_name='heartratesample',
            index=models.Index(fields=['user', 'ts'], name='app_heartra_user_id_fc7e50_idx'),
        ),
        migrations.AddIndex(
            model_name='setlog',
            index=models.Index(fields=['session', 'exercise'], name='app_setlog_session_db7149_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='weeklymealselection',
            unique_together={('subscription', 'week_start', 'meal')},
        ),
        migrations.AlterUniqueTogether(
            name='workoutexercise',
            unique_together={('workout', 'order')},
        ),
    ]
